name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "qt-dir=${{ github.workspace }}/qt/6.7.2" >> "$GITHUB_OUTPUT"
        echo "toolchain-dir=${{ github.workspace }}/tools/mingw1310_64/" >> "$GITHUB_OUTPUT"
        echo "installer-dir=${{ github.workspace }}/installer" >> "$GITHUB_OUTPUT"
        echo "package-dir=${{ github.workspace }}/installer/package" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y qt6-base-dev libusb-1.0-0-dev zlib1g-dev libgl1-mesa-dev

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install aqt -y --no-progress -r
        aqt install-qt windows desktop 6.7.2 win64_mingw --outputdir ${{ github.workspace }}/qt
        aqt install-tool windows desktop tools_mingw1310 qt.tools.win64_mingw1310 --outputdir ${{ github.workspace }}
        aqt install-tool windows desktop tools_ifw qt.tools.ifw.47 --outputdir ${{ github.workspace }}

    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake \
          -S ${{ github.workspace }} \
          -B ${{ steps.strings.outputs.build-dir }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake ^
          -S ${{ github.workspace }} ^
          -B ${{ steps.strings.outputs.build-dir }} ^
          -G "MinGW Makefiles" ^
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ^
          -DCMAKE_PREFIX_PATH=${{ steps.strings.outputs.qt-dir }}/mingw_64 ^
          -DCMAKE_C_COMPILER=${{ steps.strings.outputs.toolchain-dir }}/bin/gcc.exe ^
          -DCMAKE_CXX_COMPILER=${{ steps.strings.outputs.toolchain-dir }}/bin/g++.exe

    - name: Build
      run: |
        cmake --build ${{ steps.strings.outputs.build-dir }} --target nfc-spy

    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        New-Item -Force -ItemType "directory" -Path ${{ steps.strings.outputs.package-dir }}/org.josevcm.nfc-spy/data
        New-Item -Force -ItemType "directory" -Path ${{ steps.strings.outputs.package-dir }}/org.josevcm.nfc-spy/meta
        Copy-Item -Force ${{ steps.strings.outputs.build-dir }}/src/nfc-app/app-qt/nfc-spy.exe $packageData
        Copy-Item -Force ${{ github.workspace }}/dll/usb-1.0.26/x86_64/bin/*.dll ${{ steps.strings.outputs.package-dir }}/org.josevcm.nfc-spy/data
        Copy-Item -Force ${{ github.workspace }}/dll/openssl-1.1.1/x86_64/bin/*.dll ${{ steps.strings.outputs.package-dir }}/org.josevcm.nfc-spy/data
        Copy-Item -Force -Recurse ${{ github.workspace }}/dat/config ${{ steps.strings.outputs.package-dir }}/org.josevcm.nfc-spy/data
        Copy-Item -Force -Recurse ${{ github.workspace }}/dat/drivers ${{ steps.strings.outputs.package-dir }}/org.josevcm.nfc-spy/data
        Copy-Item -Force -Recurse ${{ github.workspace }}/dat/firmware ${{ steps.strings.outputs.package-dir }}/org.josevcm.nfc-spy/data